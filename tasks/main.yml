---
- name: Install required rsync package locally
  ansible.builtin.package:
    name: rsync
    state: present
  when: sync == "rsync"

- name: Install required rsync package on remote
  ansible.builtin.package:
    name: rsync
    state: present
  delegate_to: "{{ sync_source_host_ansible }}"
  when: sync == "rsync"

- name: "Create {{ private_key_file }}"
  ansible.builtin.command: "ssh-keygen -b 4096 -t {{ key_type }} -N '' -f {{ private_key_file | quote }}"
  args:
    creates: "{{ private_key_file }}"

- name: Register public key
  ansible.builtin.command: "cat {{ public_key_file | quote }}"
  register: public_key
  changed_when: public_key.rc != 0

- name: Define matching commands (defaults to scp)
  ansible.builtin.set_fact:
    ssh_sec_command: "^rsync[[:space:]]--server[[:space:]]--sender[[:space:]]-logDtpre.iLsfx[[:space:]].[[:space:]]{{ sync_source }}"
    sync_initial_command: "{{ rsync_initial_command }}"
    sync_command: "{{ rsync_command }}"
  when: sync == "rsync"

- name: "Allow {{ private_key_file + ' to access ' + sync_source + ' on ' + sync_source_host_ansible }}"
  ansible.posix.authorized_key:
    user: root
    key: "{{ public_key.stdout }}"
    # The scp options allowed in the regex have been determined by using a log-script
    key_options: 'command="if [[ \"$SSH_ORIGINAL_COMMAND\" =~ {{ ssh_sec_command }} ]]; then $SSH_ORIGINAL_COMMAND ;
      else echo ERROR Access Denied; fi",no-pty,no-port-forwarding,no-agent-forwarding,no-X11-forwarding'
  delegate_to: "{{ sync_source_host_ansible }}"

- name: "Create {{ sync_target_dir }}"
  ansible.builtin.file:
    path: "{{ sync_target_dir }}"
    state: directory
    mode: '755'

- name: Get OpenSSH version
  ansible.builtin.command: "ssh -V"
  register: _openssh_version_output
  changed_when: _openssh_version_output.rc != 0

- name: "Initially sync {{ sync_target }}"
  ansible.builtin.command: "{{ sync_initial_command }}"
  # Initial command does no strict host checking
  args:
    creates: "{{ sync_target }}"

- name: "Setup regular cronjob to sync {{ sync_target }}"
  ansible.builtin.cron:
    name: "Sync {{ sync_target }}"
    minute: "{{ sync_minutes }}"
    job: "{{ sync_command }}"
